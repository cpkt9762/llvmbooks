
<!-- saved from url=(0044)https://news.ycombinator.com/item?id=9376184 -->
<html lang="en" op="item"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8"><meta name="referrer" content="origin"><meta name="viewport" content="width=device-width, initial-scale=1.0"><link rel="stylesheet" type="text/css" href="./Static Single Assignment Book [pdf] _ Hacker News_files/news.css">
        <link rel="shortcut icon" href="https://news.ycombinator.com/favicon.ico">
        <title>Static Single Assignment Book [pdf] | Hacker News</title></head><body><center><table id="hnmain" border="0" cellpadding="0" cellspacing="0" width="85%" bgcolor="#f6f6ef">
        <tbody><tr><td bgcolor="#ff6600"><table border="0" cellpadding="0" cellspacing="0" width="100%" style="padding:2px"><tbody><tr><td style="width:18px;padding-right:4px"><a href="https://news.ycombinator.com/"><img src="./Static Single Assignment Book [pdf] _ Hacker News_files/y18.gif" width="18" height="18" style="border:1px white solid;"></a></td>
                  <td style="line-height:12pt; height:10px;"><span class="pagetop"><b class="hnname"><a href="https://news.ycombinator.com/news">Hacker News</a></b>
              <a href="https://news.ycombinator.com/newest">new</a> | <a href="https://news.ycombinator.com/front">past</a> | <a href="https://news.ycombinator.com/newcomments">comments</a> | <a href="https://news.ycombinator.com/ask">ask</a> | <a href="https://news.ycombinator.com/show">show</a> | <a href="https://news.ycombinator.com/jobs">jobs</a> | <a href="https://news.ycombinator.com/submit">submit</a>            </span></td><td style="text-align:right;padding-right:4px;"><span class="pagetop">
                              <a href="https://news.ycombinator.com/login?goto=item%3Fid%3D9376184">login</a>
                          </span></td>
              </tr></tbody></table></td></tr>
<tr id="pagespace" title="Static Single Assignment Book [pdf]" style="height:10px"></tr><tr><td><table class="fatitem" border="0">
        <tbody><tr class="athing" id="9376184">
      <td align="right" valign="top" class="title"><span class="rank"></span></td>      <td valign="top" class="votelinks"><center><a id="up_9376184" href="https://news.ycombinator.com/vote?id=9376184&amp;how=up&amp;goto=item%3Fid%3D9376184"><div class="votearrow" title="upvote"></div></a></center></td><td class="title"><a href="http://ssabook.gforge.inria.fr/latest/book.pdf" class="storylink">Static Single Assignment Book [pdf]</a><span class="sitebit comhead"> (<a href="https://news.ycombinator.com/from?site=inria.fr"><span class="sitestr">inria.fr</span></a>)</span></td></tr><tr><td colspan="2"></td><td class="subtext">
        <span class="score" id="score_9376184">37 points</span> by <a href="https://news.ycombinator.com/user?id=bjourne" class="hnuser">bjourne</a> <span class="age"><a href="https://news.ycombinator.com/item?id=9376184">on Apr 14, 2015</a></span> <span id="unv_9376184"></span> | <a href="https://news.ycombinator.com/hide?id=9376184&amp;goto=item%3Fid%3D9376184">hide</a> | <a href="https://hn.algolia.com/?query=Static%20Single%20Assignment%20Book&amp;sort=byDate&amp;dateRange=all&amp;type=story&amp;storyText=false&amp;prefix&amp;page=0" class="hnpast">past</a> | <a href="https://news.ycombinator.com/fave?id=9376184&amp;auth=7170bf619f20954331e8eee42fd700050f1f10e0">favorite</a> | <a href="https://news.ycombinator.com/item?id=9376184">9&nbsp;comments</a>              </td></tr>
        </tbody></table><br><br>
  <table border="0" class="comment-tree">
            <tbody><tr class="athing comtr " id="9378010"><td>
            <table border="0">  <tbody><tr>    <td class="ind"><img src="./Static Single Assignment Book [pdf] _ Hacker News_files/s.gif" height="1" width="0"></td><td valign="top" class="votelinks">
      <center><a id="up_9378010" href="https://news.ycombinator.com/vote?id=9378010&amp;how=up&amp;goto=item%3Fid%3D9376184"><div class="votearrow" title="upvote"></div></a></center>    </td><td class="default"><div style="margin-top:2px; margin-bottom:-10px;"><span class="comhead">
          <a href="https://news.ycombinator.com/user?id=jey" class="hnuser">jey</a> <span class="age"><a href="https://news.ycombinator.com/item?id=9378010">on Apr 14, 2015</a></span> <span id="unv_9378010"></span><span class="par"></span> <a class="togg" n="2" href="javascript:void(0)" onclick="return toggle(event, 9378010)">[–]</a>          <span class="storyon"></span>
                  </span></div><br><div class="comment">
                  <span class="commtext c00">Does anyone have thoughts/opinions on the algorithm presented in "Simple and Efficient Construction of Static Single Assignment Form"[1] by Braun, et al? I'm mostly wondering whether there are any non-obvious "gotchas" that aren't apparent to me as a non-expert.<p>1. <a href="http://compilers.cs.uni-saarland.de/papers/bbhlmz13cc.pdf" rel="nofollow">http://compilers.cs.uni-saarland.de/papers/bbhlmz13cc.pdf</a>
              </p><div class="reply">        <p><font size="1">
                  </font>
      </p></div></span></div></td></tr>
      </tbody></table></td></tr>
        <tr class="athing comtr " id="9378189"><td>
            <table border="0">  <tbody><tr>    <td class="ind"><img src="./Static Single Assignment Book [pdf] _ Hacker News_files/s.gif" height="1" width="40"></td><td valign="top" class="votelinks">
      <center><a id="up_9378189" href="https://news.ycombinator.com/vote?id=9378189&amp;how=up&amp;goto=item%3Fid%3D9376184"><div class="votearrow" title="upvote"></div></a></center>    </td><td class="default"><div style="margin-top:2px; margin-bottom:-10px;"><span class="comhead">
          <a href="https://news.ycombinator.com/user?id=cwzwarich" class="hnuser">cwzwarich</a> <span class="age"><a href="https://news.ycombinator.com/item?id=9378189">on Apr 15, 2015</a></span> <span id="unv_9378189"></span><span class="par"></span> <a class="togg" n="1" href="javascript:void(0)" onclick="return toggle(event, 9378189)">[–]</a>          <span class="storyon"></span>
                  </span></div><br><div class="comment">
                  <span class="commtext c00">It's a well-regarded folklore algorithm, although that paper is the first publication with a detailed analysis. If I was designing a compiler frontend and optimizer/backend in concert I would definitely use it unless some other constraint prevented it. In addition to not having to generate a non-SSA program and then immediately throw it away, it allows you to do basic optimizations during SSA construction that you would probably do immediately after constructing SSA anyways.<p>The two major downsides would be extra complexity in the frontend and the impossibility of using the algorithm for SSA repair after IR modifications. The extra complexity in the frontend can hopefully be hidden behind an abstraction, and a lot of serious compilers end up using a separate implementation of SSA construction for repair anyways, so I don't know how big of a deal these drawbacks really are.</p><p>I am one of the authors of the "highly-optimized implementation of Cytron et al.'s algorithm" that is used in LLVM. That is a bit of a misattribution; I changed LLVM to use the DJ graph algorithm by Sreedhar and Gao before they took their measurements for the paper. I would have expected their approach to be even faster in comparison than what they measured, but it could just be that they didn't do serious performance analysis and tuning.
              </p><div class="reply">        <p><font size="1">
                  </font>
      </p></div></span></div></td></tr>
      </tbody></table></td></tr>
                <tr class="athing comtr " id="9377487"><td>
            <table border="0">  <tbody><tr>    <td class="ind"><img src="./Static Single Assignment Book [pdf] _ Hacker News_files/s.gif" height="1" width="0"></td><td valign="top" class="votelinks">
      <center><a id="up_9377487" href="https://news.ycombinator.com/vote?id=9377487&amp;how=up&amp;goto=item%3Fid%3D9376184"><div class="votearrow" title="upvote"></div></a></center>    </td><td class="default"><div style="margin-top:2px; margin-bottom:-10px;"><span class="comhead">
          <a href="https://news.ycombinator.com/user?id=mpu" class="hnuser">mpu</a> <span class="age"><a href="https://news.ycombinator.com/item?id=9377487">on Apr 14, 2015</a></span> <span id="unv_9377487"></span><span class="par"></span> <a class="togg" n="5" href="javascript:void(0)" onclick="return toggle(event, 9377487)">[–]</a>          <span class="storyon"></span>
                  </span></div><br><div class="comment">
                  <span class="commtext c00">That's a great project.  I was always curious about what makes SSA so special for compiler construction.  Can we have more context?  Why this book?  For who?</span>
              <div class="reply">        <p><font size="1">
                  </font>
      </p></div></div></td></tr>
      </tbody></table></td></tr>
        <tr class="athing comtr " id="9377596"><td>
            <table border="0">  <tbody><tr>    <td class="ind"><img src="./Static Single Assignment Book [pdf] _ Hacker News_files/s.gif" height="1" width="40"></td><td valign="top" class="votelinks">
      <center><a id="up_9377596" href="https://news.ycombinator.com/vote?id=9377596&amp;how=up&amp;goto=item%3Fid%3D9376184"><div class="votearrow" title="upvote"></div></a></center>    </td><td class="default"><div style="margin-top:2px; margin-bottom:-10px;"><span class="comhead">
          <a href="https://news.ycombinator.com/user?id=rurban" class="hnuser">rurban</a> <span class="age"><a href="https://news.ycombinator.com/item?id=9377596">on Apr 14, 2015</a></span> <span id="unv_9377596"></span><span class="par"></span> <a class="togg" n="1" href="javascript:void(0)" onclick="return toggle(event, 9377596)">[–]</a>          <span class="storyon"></span>
                  </span></div><br><div class="comment">
                  <span class="commtext c00">Why SSA? Please also read the first chapter.<p>What: The IR (internal represention) is in SSA form is if every variable is defined once, and every use of a variable refers to exactly one definition. 
Think of const-only or functional programming, without any assignment statements. In SSA you can have only one lvalue, and multiple writes to the same variable in different branches are split into so-called phi merges, with a renamed final variable.</p><p>Why? It's the basis for most compiler optimizations.
You can write compilers without, but for most optimizations you'll need to convert to SSA.</p><p>For whom? For compiler and optimizer writers. People who like to optimize their programs to get better performance.
              </p><div class="reply">        <p><font size="1">
                  </font>
      </p></div></span></div></td></tr>
      </tbody></table></td></tr>
    <tr class="athing comtr " id="9377579"><td>
            <table border="0">  <tbody><tr>    <td class="ind"><img src="./Static Single Assignment Book [pdf] _ Hacker News_files/s.gif" height="1" width="40"></td><td valign="top" class="votelinks">
      <center><a id="up_9377579" href="https://news.ycombinator.com/vote?id=9377579&amp;how=up&amp;goto=item%3Fid%3D9376184"><div class="votearrow" title="upvote"></div></a></center>    </td><td class="default"><div style="margin-top:2px; margin-bottom:-10px;"><span class="comhead">
          <a href="https://news.ycombinator.com/user?id=mdaniel" class="hnuser">mdaniel</a> <span class="age"><a href="https://news.ycombinator.com/item?id=9377579">on Apr 14, 2015</a></span> <span id="unv_9377579"></span><span class="par"></span> <a class="togg" n="2" href="javascript:void(0)" onclick="return toggle(event, 9377579)">[–]</a>          <span class="storyon"></span>
                  </span></div><br><div class="comment">
                  <span class="commtext c00">&gt; what makes SSA so special for compiler construction<p>It makes doing immutability and loop invariant reasoning a ton easier, along with constant propagation: <a href="https://en.wikipedia.org/wiki/Static_single_assignment_form" rel="nofollow">https://en.wikipedia.org/wiki/Static_single_assignment_form</a>
              </p><div class="reply">        <p><font size="1">
                  </font>
      </p></div></span></div></td></tr>
      </tbody></table></td></tr>
        <tr class="athing comtr " id="9377850"><td>
            <table border="0">  <tbody><tr>    <td class="ind"><img src="./Static Single Assignment Book [pdf] _ Hacker News_files/s.gif" height="1" width="80"></td><td valign="top" class="votelinks">
      <center><a id="up_9377850" href="https://news.ycombinator.com/vote?id=9377850&amp;how=up&amp;goto=item%3Fid%3D9376184"><div class="votearrow" title="upvote"></div></a></center>    </td><td class="default"><div style="margin-top:2px; margin-bottom:-10px;"><span class="comhead">
          <a href="https://news.ycombinator.com/user?id=bishc" class="hnuser">bishc</a> <span class="age"><a href="https://news.ycombinator.com/item?id=9377850">on Apr 14, 2015</a></span> <span id="unv_9377850"></span><span class="par"></span> <a class="togg" n="1" href="javascript:void(0)" onclick="return toggle(event, 9377850)">[–]</a>          <span class="storyon"></span>
                  </span></div><br><div class="comment">
                  <span class="commtext c00">More generally, SSA means implicit use/def information. Use/def information and traversal are critical components of many static analyses and transformations: having the IR in SSA form greatly simplifies reasoning about and implementing these analyses and transformations.</span>
              <div class="reply">        <p><font size="1">
                  </font>
      </p></div></div></td></tr>
      </tbody></table></td></tr>
      <tr class="athing comtr " id="9378116"><td>
            <table border="0">  <tbody><tr>    <td class="ind"><img src="./Static Single Assignment Book [pdf] _ Hacker News_files/s.gif" height="1" width="40"></td><td valign="top" class="votelinks">
      <center><a id="up_9378116" href="https://news.ycombinator.com/vote?id=9378116&amp;how=up&amp;goto=item%3Fid%3D9376184"><div class="votearrow" title="upvote"></div></a></center>    </td><td class="default"><div style="margin-top:2px; margin-bottom:-10px;"><span class="comhead">
          <a href="https://news.ycombinator.com/user?id=pbiggar" class="hnuser">pbiggar</a> <span class="age"><a href="https://news.ycombinator.com/item?id=9378116">on Apr 15, 2015</a></span> <span id="unv_9378116"></span><span class="par"></span> <a class="togg" n="1" href="javascript:void(0)" onclick="return toggle(event, 9378116)">[–]</a>          <span class="storyon"></span>
                  </span></div><br><div class="comment">
                  <span class="commtext c00">This is a great question, and its one that isn't really made clear anywhere iin compiler books that teach it. The tl;dr is that you get lots of nice properties for free, and that it makes writing analysis algorithms much simpler with fewer edge cases.<p>For context, I was involved for a bit in writing this book, and I was at the conference that spawned it, and I wrote chapter 25. That said, it's been a few years and my memory is poor, so I may have some details below wrong. I'm basing some of this on a fun paper I wrote (<a href="http://paulbiggar.com/research/fit-2009.pdf" rel="nofollow">http://paulbiggar.com/research/fit-2009.pdf</a>) and stealing directly from my PhD thesis (<a href="http://paulbiggar.com/research/#phd-dissertation" rel="nofollow">http://paulbiggar.com/research/#phd-dissertation</a>, section 3.3)</p><p>Factored use-def chain: With a def-use chain, dataflow results may be propagated
directly from the assignment of a variable to all of its uses. However, a def-use
chain requires an edge from each definition to each use, which may be expensive
when a program has many definitions and uses of the same variable. In practice,
this occurs in the presence of switch-statements. SSA factors the def-use chain
over a φ-node, avoiding this pathological case.</p><p>OK, english version: in program analysis, you want to know the value of a variable, so you create a "def-use chain" which connects a definition of a variable to all of its uses. In some cases, you might have very many uses and definitions, esp of the same variable. This esp happens with switch-statements. In SSA form, each variable is only defined once, so you dont get pathological cases here.</p><p>Flow-sensitivity: A flow-insensitive algorithm performed on an SSA form is much
more precise than if SSA form were not used. The flow-insensitive problem
of multiple definitions to the same variable is solved by the single assignment
property. The allows a flow-insensitive algorithm to approach the precision of a
flow-sensitive algorithm.</p><p>English version: if you put something in SSA form, you can connect the use of a value directly to its definition (since it's only defined once, with one value). Without SSA, you might have more definitions of that variable, and so not know it's exact value, type, etc, when you go to use it. Without SSA form, to get that data you'd have to analyse the flow of the program (look at loops and if statements, etc). With SSA form, you can ignore those and get a similar level of precision.</p><p>Memory usage: Without SSA form, an analysis must store information for every
variable at every program point. SSA form allows a sparse analysis, where an
analysis must store information only for every assignment in the program. With
a unique version per assignment, the memory usage of storing the results of an
analysis can be considerably lower than using bit-vector or set-based approaches.</p><p>In English: When storing the results of your analysis, you can save them much more cheaply in SSA form, from a CPU and memory perspective. Without SSA, you need a hashtable of variables, with a list of values each. In SSA form, you only need on value, not a list of values, for each variable. You can also number single-assignment variables by number, rather than by name, and so use simple arrays rather than hashtables to store the results.
              </p><div class="reply">        <p><font size="1">
                  </font>
      </p></div></span></div></td></tr>
      </tbody></table></td></tr>
                <tr class="athing comtr " id="9377595"><td>
            <table border="0">  <tbody><tr>    <td class="ind"><img src="./Static Single Assignment Book [pdf] _ Hacker News_files/s.gif" height="1" width="0"></td><td valign="top" class="votelinks">
      <center><a id="up_9377595" href="https://news.ycombinator.com/vote?id=9377595&amp;how=up&amp;goto=item%3Fid%3D9376184"><div class="votearrow" title="upvote"></div></a></center>    </td><td class="default"><div style="margin-top:2px; margin-bottom:-10px;"><span class="comhead">
          <a href="https://news.ycombinator.com/user?id=mdaniel" class="hnuser">mdaniel</a> <span class="age"><a href="https://news.ycombinator.com/item?id=9377595">on Apr 14, 2015</a></span> <span id="unv_9377595"></span><span class="par"></span> <a class="togg" n="1" href="javascript:void(0)" onclick="return toggle(event, 9377595)">[–]</a>          <span class="storyon"></span>
                  </span></div><br><div class="comment">
                  <span class="commtext c00">It might also interest this audience that the book source is in their subversion:<p><a href="https://gforge.inria.fr/scm/viewvc.php/book/?root=ssabook" rel="nofollow">https://gforge.inria.fr/scm/viewvc.php/book/?root=ssabook</a></p><p>There is also a "slides" directory up one, but I didn't investigate further.
              </p><div class="reply">        <p><font size="1">
                  </font>
      </p></div></span></div></td></tr>
      </tbody></table></td></tr>
              <tr class="athing comtr " id="9377456"><td>
            <table border="0">  <tbody><tr>    <td class="ind"><img src="./Static Single Assignment Book [pdf] _ Hacker News_files/s.gif" height="1" width="0"></td><td valign="top" class="votelinks">
      <center><a id="up_9377456" href="https://news.ycombinator.com/vote?id=9377456&amp;how=up&amp;goto=item%3Fid%3D9376184"><div class="votearrow" title="upvote"></div></a></center>    </td><td class="default"><div style="margin-top:2px; margin-bottom:-10px;"><span class="comhead">
          <a href="https://news.ycombinator.com/user?id=prestonbriggs" class="hnuser">prestonbriggs</a> <span class="age"><a href="https://news.ycombinator.com/item?id=9377456">on Apr 14, 2015</a></span> <span id="unv_9377456"></span><span class="par"></span> <a class="togg" n="1" href="javascript:void(0)" onclick="return toggle(event, 9377456)">[–]</a>          <span class="storyon"></span>
                  </span></div><br><div class="comment">
                  <span class="commtext c00">Nice start.</span>
              <div class="reply">        <p><font size="1">
                  </font>
      </p></div></div></td></tr>
      </tbody></table></td></tr>
            </tbody></table>
      <br><br>
  </td></tr>
<tr><td><img src="./Static Single Assignment Book [pdf] _ Hacker News_files/s.gif" height="10" width="0"><table width="100%" cellspacing="0" cellpadding="1"><tbody><tr><td bgcolor="#ff6600"></td></tr></tbody></table><br><center><span class="yclinks"><a href="https://news.ycombinator.com/newsguidelines.html">Guidelines</a>
        | <a href="https://news.ycombinator.com/newsfaq.html">FAQ</a>
        | <a href="https://news.ycombinator.com/lists">Lists</a>
        | <a href="https://github.com/HackerNews/API">API</a>
        | <a href="https://news.ycombinator.com/security.html">Security</a>
        | <a href="http://www.ycombinator.com/legal/">Legal</a>
        | <a href="http://www.ycombinator.com/apply/">Apply to YC</a>
        | <a href="mailto:hn@ycombinator.com">Contact</a></span><br><br><form method="get" action="https://hn.algolia.com/">Search:
          <input type="text" name="q" value="" size="17" autocorrect="off" spellcheck="false" autocapitalize="off" autocomplete="false"></form>
            </center></td></tr>
      </tbody></table></center><script type="text/javascript" src="./Static Single Assignment Book [pdf] _ Hacker News_files/hn.js"></script>
</body></html>